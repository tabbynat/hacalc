/* 
 This file was generated by Dashcode.  
 You may edit this file to customize your widget or web page 
 according to the license.txt file included in the project.
 */

//
// Function: load()
// Called by HTML body element's onload event when the web application is ready to start
//

//===================================ROUND TO 5 FUNCTION=======================================
// SL rounds damage and HP to the nearest 5, however, SL rounds 2.5 and 7.5 DOWN to 0 and 5 respectively, instead of up to 5 and 10.

function SLround(inputnum)
{
    var tempnum = inputnum / 5;
    var floortempnum = Math.floor(tempnum);
    
    if ((tempnum - floortempnum) == 0.5)
    {
        return (floortempnum * 5);
    }
    else
    {
        return (Math.round(tempnum) * 5);
    }


}

//===================================CONSTANT DECLARATIONS=======================================

var Cphy = "phy"; //These are constants so that I don't mess up any physical or magical damage type comparisons.
var Cmag = "mag";
var Cnil = "untyped"; //for drill crystal splash damage.

//===================================GLOBAL VARIABLE DECLARATIONS=====================================

// Declaring all 5 targets so that they will have global scope. 0th target is the initial Target before AP1

var APTarget         = new Array();
var APdmg            = new Array(0, 0, 0, 0, 0, 0); //global variables for damage in each AP, including 0th AP
var APres            = new Array(0, 0, 0, 0, 0, 0); //global variables for resistance in each AP, including 0th AP
var APHeavySpinCount = new Array(0, 0, 0, 0, 0, 0); //global variables to keep track of heavy spin.
var APComboCount     = new Array(0, 0, 0, 0, 0, 0); //global to keep track of combo points
var HPBuff           = 0; // used to record soul harvest or manual buffs, so that recalculations still work.
var FlagCrossUpdate  = false; //to avoid infinite loops when cross updating attacker and defender.


//===================================FUNCTION DECLARATIONS=======================================

//Constructor functions

function OCPuppet(race, name, basemagdef, basephydef, basehp) //Puppet Object Constructor, for defence only. Only really relevant for Tribe.
{
	this.race = race; // CL, DE, DW, TR, TF, [SL] should be the possible values.
	this.name = name;
	this.basemagdef = basemagdef; //float. 0.10 is 10%.
	this.basephydef = basephydef; //float. 0.10 is 10%.
	this.basehp = basehp;
}


function OCAttack(race, name, basedmg, dmgtype, percentage) //Object COnstructor for attacks
{
	this.race = race;
	this.name = name;
	this.basedmg = basedmg; //integer 
	this.dmgtype = dmgtype; //Cmag or Cphy or untyped
	this.percentage = percentage; //float 0.50 is 50%. Multiply by the base damage to get the splash damage or bonus melee damage, as damage is rounded to the nearest 5 after all modifiers. 1.00 represents 100%, 0.50 represents 50% etc.
}

function OCTarget(puppet, lastdamage, maxhp, currenthp, itemhelm, itemshield, itemsoulstone, itemmanavial, buffbubble, debuffannihilator, buffbrew, itemspikearmor, debuffjarate, debuffmonk) //constructs a target. The idea is that this target will be constructed at the setup phase and each attack will deal damage etc to the target.
{
	this.puppet           = puppet; //so that we have the base target stats.
	this.lastdamage       = lastdamage; //this is mainly so that DamageTarget can return the damage that the target has taken.
	this.maxhp            = maxhp; //to account for tribe axe and warrior.
	this.currenthp        = currenthp; //to account for tribe axe and warrior.
	this.itemhelm         = itemhelm; //boolean
	this.itemshield       = itemshield; //boolean
	this.itemsoulstone    = itemsoulstone; //boolean
	this.itemmanavial      = itemmanavial; //boolean
	this.debuffannihilator = debuffannihilator; //boolean
    this.buffbubble       = buffbubble; //boolean
	this.buffbrew         = buffbrew; //boolean
	this.itemspikearmor   = itemspikearmor; //boolean
	this.debuffjarate     = debuffjarate; //boolean
    this.debuffmonk       = debuffmonk; // boolean
}

function CalcAttack(attack, attacktile, mediclink, itemrunemetal, itemscroll, itemmeat, debuffpriestess, buffbloodlust, buffpaladindmg) //to calculate raw damage before resists and crystal drill damage.

{
	var attackpower = attack.basedmg;
	
	if (attacktile)
	{
		if (attack.race == "DW")
		{
			if (attack.name == "Engineer Attack")
			{
				attackpower = attackpower + 140;
			}

			else
			{
				attackpower = attackpower + 120;
			}
				
		}
		else
		{

			attackpower = attackpower + 100;
        }
	}		

	//attacktile done.	

	if (itemrunemetal)
	{
        if (attack.race == "TF")
		{        
            attackpower = attackpower * 1.3;
        }
        else
        {
            attackpower = attackpower * 1.5;
        }
	}
	
	if (mediclink)
    {
        attackpower = attackpower * 1.5;
    }
    
    if (itemscroll)
	{
		attackpower = attackpower * 3;
	}
	
	if (itemmeat)
	{
		attackpower = attackpower * 2.75;
	}
	
	if (debuffpriestess)
	{
		attackpower = attackpower / 2;
	}

	if (buffbloodlust)	
	{
		attackpower = attackpower * 1.5;
	}
	
	if (buffpaladindmg > 0)
	{
		attackpower = attackpower * Math.pow(1.05,buffpaladindmg);
	}

	attackpower = attackpower * attack.percentage; 
	
	//all multiplicative modifiers done, now deal with damage after multiplicative bonuses but before resist
    
    if (attack.name == "Sniper Kneeling Attack")
    {
        attackpower = attackpower + 250;
    }
    
	attackpower = SLround(attackpower) // Round to the nearest 5.
    
    return attackpower;

}

function CalcResist(target, attack, resisttile, buffpaladinres, debuffannihilator, debuffjarate, debuffpoisoner)
{
    var resist = 0;
    
    switch (attack.dmgtype)
	{
        case Cmag:
            resist = target.puppet.basemagdef;
            if (target.itemhelm)
            {
                resist = resist + 0.2;
            }
            break;
        case Cphy:
            resist = target.puppet.basephydef;
            if (target.itemshield)
            {
                resist = resist + 0.2;
            }
            break;
        default:
            resist = 0;
	}
    
    if (buffpaladinres > 0) //does paladin buff buff beer as well? Think not, so this should be the right order.
	{
		resist = resist + (buffpaladinres * 0.05);
	}

	// resolve target buffs	

	if (target.buffbrew)
	{
		resist = resist + 0.5;
	}

	if (resisttile)
	{
		if (target.puppet.race == "DW")
		{
			if (target.puppet.name == "Engineer")
			{
				resist = resist + 0.28;
			}
		
            else
            {
                resist = resist + 0.24;
            }
        }
        else
        {
            resist = resist + 0.20;
        }
    }
    if (debuffannihilator && (attack.dmgtype == Cphy))
    {
        resist = resist - 0.5;
    }
    
    if (debuffjarate)
    {
        resist = resist - 1.75;
    }
    
    if (debuffpoisoner)
    {
        resist = resist - 0.5;
    }

    return resist;
    
}

//===================================COUNCIL DATA SETUP=======================================

//Council puppets setup

var CL_P_Knight = new OCPuppet("CL", "Knight", 0.00, 0.20, 1000);
var CL_P_Archer = new OCPuppet("CL", "Archer", 0.00, 0.00,  800);
var CL_P_Wizard = new OCPuppet("CL", "Wizard", 0.10, 0.00,  800);
var CL_P_Cleric = new OCPuppet("CL", "Cleric", 0.00, 0.00,  800);
var CL_P_Ninja  = new OCPuppet("CL",  "Ninja", 0.00, 0.00,  800);

var CL_Team = [
	CL_P_Knight, 
	CL_P_Archer, 
	CL_P_Wizard, 
	CL_P_Cleric, 
	CL_P_Ninja]; //array of all puppets

//Council attacks setup

var CL_A_Knight   = new OCAttack("CL",        "Knight Attack", 200, Cphy, 1.00);
var CL_A_ArcherM  = new OCAttack("CL",  "Archer Melee Attack", 300, Cphy, 0.50);
var CL_A_ArcherR  = new OCAttack("CL", "Archer Ranged Attack", 300, Cphy, 1.00);
var CL_A_Wizard1  = new OCAttack("CL", "Wizard Direct Attack", 200, Cmag, 1.00);
var CL_A_Wizard2  = new OCAttack("CL",   "Wizard First Chain", 200, Cmag, 0.75);
var CL_A_Wizard3  = new OCAttack("CL",  "Wizard Second Chain", 200, Cmag, 0.56);
var CL_A_Cleric   = new OCAttack("CL",        "Cleric Attack", 200, Cmag, 1.00);
var CL_A_NinjaR   = new OCAttack("CL",  "Ninja Ranged Attack", 200, Cphy, 1.00);
var CL_A_NinjaM   = new OCAttack("CL",   "Ninja Melee Attack", 200, Cphy, 2.00);
var CL_A_Inferno  = new OCAttack("CL",              "Inferno", 350, Cmag, 1.00);

var CL_Attacks_Base = [
	CL_A_Knight, 
	CL_A_ArcherM, 
	CL_A_ArcherR, 
	CL_A_Wizard1, 
	CL_A_Wizard2, 
	CL_A_Wizard3, 
	CL_A_Cleric, 
	CL_A_NinjaR, 
	CL_A_NinjaM, 
	CL_A_Inferno]; //array of all attacks

//===================================DARK ELVES DATA SETUP=======================================

//Dark Elves puppets setup

var DE_P_VoidMonk    = new OCPuppet("DE",   "Void Monk", 0.20, 0.20,  800);
var DE_P_Impaler     = new OCPuppet("DE",     "Impaler", 0.00, 0.00,  800);
var DE_P_Necromancer = new OCPuppet("DE", "Necromancer", 0.00, 0.00,  800);
var DE_P_Priestess   = new OCPuppet("DE",   "Priestess", 0.00, 0.00,  800);
var DE_P_Wraith0     = new OCPuppet("DE",   "Wraith L0", 0.10, 0.00,  800); //wraith with 0, 1, 2 and 3 eats.
var DE_P_Wraith1     = new OCPuppet("DE",   "Wraith L1", 0.10, 0.00,  800); //base hp is always 800. hp buffs dealt with in updatemaxhp
var DE_P_Wraith2     = new OCPuppet("DE",   "Wraith L2", 0.10, 0.00,  800);
var DE_P_Wraith3     = new OCPuppet("DE",   "Wraith L3", 0.10, 0.00,  800);
var DE_P_Phantom     = new OCPuppet("DE",     "Phantom", 0.00, 0.00,  100);

var DE_Team = [
	DE_P_VoidMonk, 
	DE_P_Impaler, 
	DE_P_Necromancer, 
	DE_P_Priestess, 
	DE_P_Wraith0, 
	DE_P_Wraith1, 
	DE_P_Wraith2,
    DE_P_Wraith3, 
	DE_P_Phantom];

//Dark Elves attacks setup

var DE_A_VoidMonk1   = new OCAttack("DE","Void Monk Direct Attack", 200, Cphy, 1.00);
var DE_A_VoidMonk2   = new OCAttack("DE","Void Monk Splash Attack", 200, Cphy, 0.66);
var DE_A_Impaler     = new OCAttack("DE",         "Impaler Attack", 300, Cphy, 1.00);
var DE_A_Necromancer = new OCAttack("DE",     "Necromancer Attack", 200, Cmag, 1.00);
var DE_A_Priestess   = new OCAttack("DE",       "Priestess Attack", 200, Cmag, 1.00);
var DE_A_Wraith0     = new OCAttack("DE",       "Wraith L0 Attack", 250, Cmag, 1.00);
var DE_A_Wraith1     = new OCAttack("DE",       "Wraith L1 Attack", 300, Cmag, 1.00);
var DE_A_Wraith2     = new OCAttack("DE",       "Wraith L2 Attack", 350, Cmag, 1.00);
var DE_A_Wraith3     = new OCAttack("DE",       "Wraith L3 Attack", 400, Cmag, 1.00);
var DE_A_Phantom     = new OCAttack("DE",         "Phantom Attack", 100, Cmag, 1.00);
var DE_A_SoulHarvest = new OCAttack("DE",           "Soul Harvest", 100, Cmag, 1.00);

var DE_Attacks_Base = [
	DE_A_VoidMonk1, 
	DE_A_VoidMonk2, 
	DE_A_Impaler, 
	DE_A_Necromancer, 
	DE_A_Priestess, 
	DE_A_Wraith0,
	DE_A_Wraith1,
	DE_A_Wraith2,
    DE_A_Wraith3,
	DE_A_Phantom,
	DE_A_SoulHarvest];

//===================================DARK ELVES DATA SETUP=======================================

// Dwarves puppets setup

var DW_P_Paladin    = new OCPuppet("DW",   "Paladin", 0.10, 0.10, 900);
var DW_P_Grenadier  = new OCPuppet("DW", "Grenadier", 0.00, 0.00,  800);
var DW_P_Gunner     = new OCPuppet("DW",    "Gunner", 0.00, 0.00,  800);
var DW_P_Engineer   = new OCPuppet("DW",  "Engineer", 0.00, 0.00,  800);
var DW_P_Annihilator = new OCPuppet("DW","Annihilator", 0.00, 0.00,  650);

var DW_Team = [
	DW_P_Paladin, 
	DW_P_Grenadier, 
	DW_P_Gunner, 
	DW_P_Engineer, 
	DW_P_Annihilator];
    
    

var DW_A_Paladin     = new OCAttack("DW",           "Paladin Attack", 200, Cphy, 1.00);
var DW_A_Grenadier1  = new OCAttack("DW",  "Grenadier Direct Attack", 200, Cmag, 1.00);
var DW_A_Grenadier2  = new OCAttack("DW",  "Grenadier Splash Attack", 200, Cmag, 0.50);
var DW_A_GrenadierM  = new OCAttack("DW",  "Grenadier Melee Attack", 200, Cmag, 0.50);
var DW_A_GunnerR     = new OCAttack("DW",      "Gunner Range Attack", 200, Cphy, 1.00);
var DW_A_GunnerM     = new OCAttack("DW",      "Gunner Melee Attack", 300, Cphy, 1.00);
var DW_A_Engineer    = new OCAttack("DW",          "Engineer Attack", 200, Cphy, 1.00);
var DW_A_Annihilator1 = new OCAttack("DW", "Annihilator Direct Attack", 300, Cmag, 1.00);
var DW_A_Annihilator2 = new OCAttack("DW", "Annihilator Splash Attack", 300, Cmag, 0.20);
var DW_A_Drill1      = new OCAttack("DW",      "Drill Direct Attack", 600, Cphy, 1.00);
var DW_A_Drill2      = new OCAttack("DW",      "Drill Splash Attack", 600, Cphy, 0.33); //untyped damage from gem tile to be added at damage calculation stage?

var DW_Attacks_Base = [
	DW_A_Paladin,
    DW_A_Grenadier1,
	DW_A_Grenadier2,
    DW_A_GrenadierM,
	DW_A_GunnerR,
	DW_A_GunnerM,
	DW_A_Engineer,
	DW_A_Annihilator1,
	DW_A_Annihilator2,
	DW_A_Drill1,
	DW_A_Drill2];

//===================================TRIBE DATA SETUP=======================================

var TR_P_Warrior    = new OCPuppet("TR",    "Warrior", 0.00, 0.20,  800);
var TR_P_AxeThrower = new OCPuppet("TR","Axe Thrower", 0.00, 0.00,  800);
var TR_P_Witch      = new OCPuppet("TR",      "Witch", 0.00, 0.00,  800);
var TR_P_Shaman     = new OCPuppet("TR",     "Shaman", 0.10, 0.00,  800);
var TR_P_Chieftain  = new OCPuppet("TR",  "Chieftain", 0.00, 0.00, 1000);

var TR_Team = [
	TR_P_Warrior,
	TR_P_AxeThrower,
	TR_P_Witch,
	TR_P_Shaman,
	TR_P_Chieftain];  


var TR_A_Warrior    = new OCAttack("TR",              "Warrior Attack", 200, Cphy, 1.00);
var TR_A_AxeThrower = new OCAttack("TR",          "Axe Thrower Attack", 200, Cphy, 1.00);
var TR_A_Witch1     = new OCAttack("TR",         "Witch Direct Attack", 200, Cmag, 1.00);
var TR_A_Witch2     = new OCAttack("TR", "Witch Corpse Explode Attack", 200, Cmag, 0.50);
var TR_A_Shaman     = new OCAttack("TR",               "Shaman Attack", 200, Cmag, 1.00);
var TR_A_Chieftain1 = new OCAttack("TR",     "Chieftain Direct Attack", 200, Cphy, 1.00);
var TR_A_Chieftain2 = new OCAttack("TR",     "Chieftain Splash Attack", 200, Cphy, 0.66);

var TR_Attacks_Base = [
	TR_A_Warrior,
	TR_A_AxeThrower,
	TR_A_Witch1,
    TR_A_Witch2,
	TR_A_Shaman,
	TR_A_Chieftain1,
	TR_A_Chieftain2];

//===================================TEAM FORTRESS DATA SETUP=======================================

var TF_P_Spy      = new OCPuppet("TF", "Spy"     , 0.00, 0.00,  650);
var TF_P_Scout    = new OCPuppet("TF", "Scout"   , 0.00, 0.00,  650);
var TF_P_Soldier  = new OCPuppet("TF", "Soldier" , 0.00, 0.00,  800);
var TF_P_Sniper   = new OCPuppet("TF", "Sniper"  , 0.00, 0.00,  650);
var TF_P_Medic    = new OCPuppet("TF", "Medic"   , 0.10, 0.00,  800);
var TF_P_Engineer = new OCPuppet("TF", "Engineer", 0.00, 0.00,  800);
var TF_P_Heavy    = new OCPuppet("TF", "Heavy"   , 0.00, 0.00, 1100);
var TF_P_Pyro     = new OCPuppet("TF", "Pyro"    , 0.00, 0.00,  800);
var TF_P_Demoman  = new OCPuppet("TF", "Demoman" , 0.00, 0.00,  800);

var TF_Team = [
	TF_P_Spy,
	TF_P_Scout,
	TF_P_Soldier,
	TF_P_Sniper,
	TF_P_Medic,
	TF_P_Engineer,
	TF_P_Heavy,
	TF_P_Pyro,
	TF_P_Demoman];  

var TF_A_SpyM     = new OCAttack("TF", "Spy Normal Attack"     , 200, Cphy, 1.00);
var TF_A_SpyB     = new OCAttack("TF", "Spy Backstab Attack"   , 200, Cphy, 4.00);
var TF_A_Scout    = new OCAttack("TF", "Scout Attack"          , 100, Cphy, 1.00);
var TF_A_Soldier  = new OCAttack("TF", "Soldier Attack"        , 300, Cmag, 1.00);
var TF_A_Sniper1  = new OCAttack("TF", "Sniper Normal Attack"  , 100, Cphy, 1.00);
var TF_A_Sniper2  = new OCAttack("TF", "Sniper Kneeling Attack", 100, Cphy, 1.00); //bonus damage to be included in damage calc function
var TF_A_Medic    = new OCAttack("TF", "Medic Attack"          , 200, Cmag, 1.00);
var TF_A_Engineer = new OCAttack("TF", "Engineer Attack"       , 200, Cphy, 1.00);
var TF_A_HeavyR   = new OCAttack("TF", "Heavy Ranged Attack"   , 100, Cphy, 1.00); //spin up damage in damage calc function
var TF_A_HeavyM   = new OCAttack("TF", "Heavy Melee Attack"    , 100, Cphy, 2.00); 
var TF_A_Pyro     = new OCAttack("TF", "Pyro Attack"           , 300, Cmag, 1.00);
var TF_A_Demoman1 = new OCAttack("TF", "Demoman Direct Attack" , 200, Cmag, 1.00);
var TF_A_Demoman2 = new OCAttack("TF", "Demoman Splash Attack" , 200, Cmag, 0.50);


var TF_Attacks_Base = [
	TF_A_SpyM,
	TF_A_SpyB,
	TF_A_Scout,
	TF_A_Soldier,
	TF_A_Sniper1, 
	TF_A_Sniper2,
	TF_A_Medic,
	TF_A_Engineer,
	TF_A_HeavyR,
	TF_A_HeavyM,
	TF_A_Pyro,
	TF_A_Demoman1,
	TF_A_Demoman2];

//===================================SHAOLIN DATA SETUP=======================================

var SL_P_Monk      = new OCPuppet("SL", "Monk"      , 0.00, 0.00, 1000);
var SL_P_Windblade = new OCPuppet("SL", "Windblade" , 0.00, 0.00,  800);
var SL_P_Poisoner  = new OCPuppet("SL", "Poisoner"  , 0.00, 0.00,  650);
var SL_P_Taoist    = new OCPuppet("SL", "Taoist"    , 0.00, 0.00,  800);
var SL_P_Shadow    = new OCPuppet("SL", "Shadow"    , 0.20, 0.00, 1000);

var SL_Team_Base = [
    SL_P_Monk,
    SL_P_Windblade,
    SL_P_Poisoner,
    SL_P_Taoist,
    SL_P_Shadow];
    
var SL_Team = Object.create(SL_Team_Base);
    
var SL_A_Monk       = new OCAttack("SL", "Monk Attack"                   , 200, Cphy, 1.00);
var SL_A_Windblade1 = new OCAttack("SL", "Windblade Direct Attack"       , 200, Cphy, 1.00);
var SL_A_Windblade2 = new OCAttack("SL", "Windblade First Chain Attack"  , 200, Cphy, 0.50);
var SL_A_Windblade3 = new OCAttack("SL", "Windblade Second Chain Attack" , 200, Cphy, 0.25);
var SL_A_Poisoner   = new OCAttack("SL", "Poisoner Attack"               , 200, Cmag, 1.00);
var SL_A_Taoist     = new OCAttack("SL", "Taoist Attack"                 , 200, Cmag, 1.00);
var SL_A_Shadow     = new OCAttack("SL", "Shadow Attack"                 , 100, Cmag, 1.00);
var SL_A_Dragon1    = new OCAttack("SL", "Dragon Direct Attack"          , 600, Cmag, 1.00);
var SL_A_Dragon2    = new OCAttack("SL", "Dragon First Chain Attack"     , 600, Cmag, 0.75);
var SL_A_Dragon3    = new OCAttack("SL", "Dragon Second Chain Attack"    , 600, Cmag, 0.5625);
var SL_A_Dragon4    = new OCAttack("SL", "Dragon Third Chain Attack"     , 600, Cmag, 0.421875);

var SL_Attacks_Base = [
    SL_A_Monk,
    SL_A_Windblade1,
    SL_A_Windblade2,
    SL_A_Windblade3,
    SL_A_Poisoner,
    SL_A_Taoist,
    SL_A_Shadow,
    SL_A_Dragon1,
    SL_A_Dragon2,
    SL_A_Dragon3,
    SL_A_Dragon4];

//===================================MISC/LEVEL DATA SETUP=======================================


var MS_A_BarbedCrystal = new OCAttack("MS", "Barbed Crystal Attack", 300, Cphy, 1.00);
var MS_A_Train         = new OCAttack("MS",          "Train Attack", 400, Cphy, 1.00);
var MS_A_NoAttack      = new OCAttack("MS",      "Move/OtherAction",   0,    0, 0.00);


var MS_Attacks = [
	MS_A_BarbedCrystal,
	MS_A_Train,
	MS_A_NoAttack];

//concat the misc attacks onto each team attack array

var CL_Attacks = CL_Attacks_Base.concat(MS_Attacks);
var DE_Attacks = DE_Attacks_Base.concat(MS_Attacks);
var DW_Attacks = DW_Attacks_Base.concat(MS_Attacks);
var TR_Attacks = TR_Attacks_Base.concat(MS_Attacks);
var TF_Attacks = TF_Attacks_Base.concat(MS_Attacks);
var SL_Attacks = SL_Attacks_Base.concat(MS_Attacks);

var AllRace_Team = [CL_Team, DE_Team, DW_Team, TR_Team, TF_Team, SL_Team]; // array of all teams. For target selection.
var AllRace_Attacks = [CL_Attacks, DE_Attacks, DW_Attacks, TR_Attacks, TF_Attacks, SL_Attacks]; // array of all attack arrays.


//===================================DECLARE ELEMENT VAR======================================

var popupAttack               = new Object();
var popupAttackerRace         = new Object();
var popupDefenderRace         = new Object();
var checkboxinputHelm         = new Object();
var checkboxinputShield       = new Object();
var checkboxdivHelm           = new Object();
var checkboxdivShield         = new Object();
var checkboxinputItemManaVial = new Object();
var checkboxinputBuffBrew     = new Object();
var checkboxinputDebuffMonk   = new Object();
var textFieldInitialMaxHP     = new Object();
var textFieldInitialCurrentHP = new Object();

var popupAttackArray = Array("",
    "popupAttack1",
    "popupAttack2",
    "popupAttack3",
    "popupAttack4",
    "popupAttack5");
    
var checkboxinputRunemetalArray = Array("", 
    "checkboxinputRunemetal1", 
    "checkboxinputRunemetal2", 
    "checkboxinputRunemetal3", 
    "checkboxinputRunemetal4", 
    "checkboxinputRunemetal5");

var checkboxinputAttackTileArray = Array("",
    "checkboxinputAttackTile1",
    "checkboxinputAttackTile2",
    "checkboxinputAttackTile3",
    "checkboxinputAttackTile4",
    "checkboxinputAttackTile5");

var checkboxinputMedicLinkArray = Array("",
    "checkboxinputMedicLink1",
    "checkboxinputMedicLink2",
    "checkboxinputMedicLink3",
    "checkboxinputMedicLink4",
    "checkboxinputMedicLink5");

var checkboxinputItemScrollArray = Array("",
    "checkboxinputItemScroll1",
    "checkboxinputItemScroll2",
    "checkboxinputItemScroll3",
    "checkboxinputItemScroll4",
    "checkboxinputItemScroll5");

var checkboxinputItemMeatArray = Array("",
    "checkboxinputItemMeat1",
    "checkboxinputItemMeat2",
    "checkboxinputItemMeat3",
    "checkboxinputItemMeat4",
    "checkboxinputItemMeat5");
    
var checkboxinputBuffBloodLustArray = Array("",
    "checkboxinputBuffBloodLust1",
    "checkboxinputBuffBloodLust2",
    "checkboxinputBuffBloodLust3",
    "checkboxinputBuffBloodLust4",
    "checkboxinputBuffBloodLust5");

var checkboxinputItemComboPotionArray = Array("",
    "checkboxinputItemComboPotion1",
    "checkboxinputItemComboPotion2",
    "checkboxinputItemComboPotion3",
    "checkboxinputItemComboPotion4",
    "checkboxinputItemComboPotion5");

var checkboxinputNewComboArray = Array("",
    "checkboxinputNewCombo1",
    "checkboxinputNewCombo2",
    "checkboxinputNewCombo3",
    "checkboxinputNewCombo4",
    "checkboxinputNewCombo5");

var popupBuffPaladinDmgArray = Array("",
    "popupBuffPaladinDmg1",
    "popupBuffPaladinDmg2",
    "popupBuffPaladinDmg3",
    "popupBuffPaladinDmg4",
    "popupBuffPaladinDmg5");

var checkboxinputDebuffAnnihilatorArray = Array("",
    "checkboxinputDebuffAnnihilator1",
    "checkboxinputDebuffAnnihilator2",
    "checkboxinputDebuffAnnihilator3",
    "checkboxinputDebuffAnnihilator4",
    "checkboxinputDebuffAnnihilator5");

var checkboxinputResistTileArray = Array("",
    "checkboxinputResistTile1",
    "checkboxinputResistTile2",
    "checkboxinputResistTile3",
    "checkboxinputResistTile4",
    "checkboxinputResistTile5");

var checkboxinputDebuffPriestessArray = Array("",
    "checkboxinputDebuffPriestess1",
    "checkboxinputDebuffPriestess2",
    "checkboxinputDebuffPriestess3",
    "checkboxinputDebuffPriestess4",
    "checkboxinputDebuffPriestess5");

var checkboxinputDebuffJarateArray = Array("",
    "checkboxinputDebuffJarate1",
    "checkboxinputDebuffJarate2",
    "checkboxinputDebuffJarate3",
    "checkboxinputDebuffJarate4",
    "checkboxinputDebuffJarate5");

var checkboxinputDebuffPoisonerArray = Array("",
    "checkboxinputDebuffPoisoner1",
    "checkboxinputDebuffPoisoner2",
    "checkboxinputDebuffPoisoner3",
    "checkboxinputDebuffPoisoner4",
    "checkboxinputDebuffPoisoner5");
    
var popupBuffPaladinResArray = Array("",
    "popupBuffPaladinRes1",
    "popupBuffPaladinRes2",
    "popupBuffPaladinRes3",
    "popupBuffPaladinRes4",
    "popupBuffPaladinRes5");

var textAttackValueArray = Array("",
    "textAttackValue1",
    "textAttackValue2",
    "textAttackValue3",
    "textAttackValue4",
    "textAttackValue5");
    
var textResistValueArray = Array("",
    "textResistValue1",
    "textResistValue2",
    "textResistValue3",
    "textResistValue4",
    "textResistValue5");

var textDamageValueArray = Array("",
    "textDamageValue1",
    "textDamageValue2",
    "textDamageValue3",
    "textDamageValue4",
    "textDamageValue5");

var textHPValueArray = Array("",
    "textHPValue1",
    "textHPValue2",
    "textHPValue3",
    "textHPValue4",
    "textHPValue5");

var checkboxinputRunemetal        = new Object();
var checkboxinputAttackTile       = new Object();
var checkboxinputItemScroll       = new Object();
var checkboxinputItemMeat         = new Object();
var checkboxinputBuffBloodLust    = new Object();
var checkboxinputItemComboPotion  = new Object();
var checkboxinputNewCombo         = new Object();
var popupBuffPaladinDmg           = new Object();
var checkboxinputResistTile       = new Object();
var checkboxinputDebuffAnnihilator = new Object();
var checkboxinputDebuffPriestess  = new Object();
var checkboxinputDebuffJarate     = new Object();
var checkboxinputDebuffPoisoner   = new Object();
var popupBuffPaladinRes           = new Object();
var textAttackValue               = new Object();
var textResistValue               = new Object();
var textDamageValue               = new Object(); 
var textHPValue                   = new Object();

//====================================FUNCTIONS===============================================



function load()
{
    /Mobile/.test(navigator.userAgent) && !location.hash && setTimeout(function () {
    if (!pageYOffset) window.scrollTo(0, 1);
}, 1000); // to hide address bar in mobile safari
    
    dashcode.setupParts();

    InitialiseObjects();
        
    PopupAttackerRaceUpdate();
    PopupDefenderRaceUpdate();
    UpdateTarget1();
    
    AP1UpdateAll();

}

function InitialiseObjects()
{
    popupAttackerRace               = document.getElementById("popupAttackerRace");
    popupDefenderRace               = document.getElementById("popupDefenderRace");
    checkboxinputHelm               = document.getElementById("checkboxinputHelm");
    checkboxinputShield             = document.getElementById("checkboxinputShield");
    checkboxdivHelm                 = document.getElementById("checkboxdivHelm");
    checkboxdivShield               = document.getElementById("checkboxdivShield");
    checkboxinputItemManaVial       = document.getElementById("checkboxinputItemManaVial");
    checkboxinputBuffBrew           = document.getElementById("checkboxinputBuffBrew");
    checkboxinputDebuffMonk         = document.getElementById("checkboxinputDebuffMonk");
    textFieldInitialMaxHP           = document.getElementById("textFieldInitialMaxHP");
    textFieldInitialCurrentHP       = document.getElementById("textFieldInitialCurrentHP");

}

function PopupPopulate(Popup, PopulateArray)
{
    if (Popup.hasChildNodes()) 
    {
        while (Popup.childNodes.length >= 1) 
        {
            Popup.removeChild(Popup.firstChild);       
        }
    }

    //add new
    
    for (var x = 0; x < PopulateArray.length; x++) 
    {
        var option = document.createElement("option");
        option.text = PopulateArray[x];
        option.value = x;
        Popup.appendChild(option);      
    };
    
}

function UpdateShaolin()
{

    // To account for Shadow converted units
    
    if ((popupDefenderRace.value == 5) && (popupAttackerRace.value != 5)) //if Defender is Shaolin and Attacker is not Shaolin 
    {
        SL_Team = Object.create(SL_Team_Base.concat(AllRace_Team[popupAttackerRace.value]));
        SL_Attacks = SL_Attacks_Base.concat(MS_Attacks); 
    }
    else if ((popupAttackerRace.value == 5) && (popupDefenderRace.value != 5)) // else if Attacker is SL and DEfender is not SL
    {
        SL_Team = Object.create(SL_Team_Base);
        
        var PopupDefenderRaceValue = popupDefenderRace.value;
        
        switch (PopupDefenderRaceValue)
        {
            case "0":
            SL_Attacks = SL_Attacks_Base.concat(CL_Attacks);
            break;
        
            case "1":
            SL_Attacks = SL_Attacks_Base.concat(DE_Attacks);
            break;
        
            case "2":
            SL_Attacks = SL_Attacks_Base.concat(DW_Attacks);
            break;
        
            case "3":
            SL_Attacks = SL_Attacks_Base.concat(TR_Attacks);
            break;
        
            case "4":
            SL_Attacks = SL_Attacks_Base.concat(TF_Attacks);
            break;
        }
    }
    else
    {
        SL_Team = Object.create(SL_Team_Base);
        SL_Attacks = SL_Attacks_Base.concat(MS_Attacks);
    }
    
    AllRace_Team = [CL_Team, DE_Team, DW_Team, TR_Team, TF_Team, SL_Team];
    AllRace_Attacks = [CL_Attacks, DE_Attacks, DW_Attacks, TR_Attacks, TF_Attacks, SL_Attacks];

}


function PopupDefenderRaceUpdate(event)
{
    var TargetArray= [];
    
    // To account for races which do not have shining helm or dragonscale.

    var DefenderRaceValue = popupDefenderRace.value;
    
    UpdateShaolin();
    
    if (!FlagCrossUpdate)
    {
        FlagCrossUpdate = true;
        PopupAttackerRaceUpdate();
        FlagCrossUpdate = false;
    }
    
    // ====== Reset defaults section

    var HelmText = "Shining Helm";
    var ShieldText = "Dragon Scale";
    checkboxinputHelm.disabled = false;
    
    for (var x = 0; x < AllRace_Team[DefenderRaceValue].length; x++)
    {
        TargetArray[x] = AllRace_Team[DefenderRaceValue][x].name;
    }
            
    PopupPopulate(popupTarget, TargetArray);
    popupTarget.value = TargetArray[0];
    
    switch (DefenderRaceValue)
    {

        case "0": //Council
            break;
        case "1": //Dark Elves

            ShieldText = "Soul Stone";

            break;
        case "2": //Dwarves
            break;
        case "3": //Tribe
            //placeholder function, update all relevant popups etc.
                        
            HelmText = "No Helm";
            ShieldText = "Spike Armor";
            checkboxinputHelm.checked = false; // the div does not appear to respond to the property disabled.
            checkboxinputHelm.disabled = true;
            
            break;
        
        
    }
        
    checkboxdivHelm.innerText = HelmText;
    checkboxdivShield.innerText = ShieldText;
    
    if (typeof APTarget[1] !== "undefined")
    {
        UpdateTarget1();
    }
    
}


function PopupAttackerRaceUpdate(event)
{
    var AttackArray = [];
    var PopupAttackerRaceValue = popupAttackerRace.value;
    
    UpdateShaolin();
    
    if (!FlagCrossUpdate)
    {
        FlagCrossUpdate = true;
        PopupDefenderRaceUpdate();
        FlagCrossUpdate = false;
    }
    
    
    for (var x = 0; x < AllRace_Attacks[PopupAttackerRaceValue].length; x++)
    {
        AttackArray[x] = AllRace_Attacks[PopupAttackerRaceValue][x].name;
    }

    
    for (var x = 1; x < 6; x++) 
    {
        popupAttack = document.getElementById(popupAttackArray[x]);
        PopupPopulate(popupAttack, AttackArray);
    }
    
    if (typeof APTarget[1] !== "undefined") // if the puppet is defined, go ahead and update.
    {
        AP1UpdateAll();
    }
    
}

function AttackUpdate(AP)
{

    popupAttack                   = document.getElementById(popupAttackArray[AP]);
    checkboxinputRunemetal        = document.getElementById(checkboxinputRunemetalArray[AP]);
    checkboxinputAttackTile       = document.getElementById(checkboxinputAttackTileArray[AP]);
    checkboxinputMedicLink        = document.getElementById(checkboxinputMedicLinkArray[AP]);
    checkboxinputItemScroll       = document.getElementById(checkboxinputItemScrollArray[AP]);
    checkboxinputItemMeat         = document.getElementById(checkboxinputItemMeatArray[AP]);
    checkboxinputBuffBloodLust    = document.getElementById(checkboxinputBuffBloodLustArray[AP]);
    checkboxinputItemComboPotion  = document.getElementById(checkboxinputItemComboPotionArray[AP]);
    checkboxinputNewCombo         = document.getElementById(checkboxinputNewComboArray[AP]);
    popupBuffPaladinDmg           = document.getElementById(popupBuffPaladinDmgArray[AP]);
    checkboxinputDebuffAnnihilator = document.getElementById(checkboxinputDebuffAnnihilatorArray[AP]);
    checkboxinputDebuffPriestess  = document.getElementById(checkboxinputDebuffPriestessArray[AP]);
    textAttackValue               = document.getElementById(textAttackValueArray[AP]);
    textDamageValue               = document.getElementById(textDamageValueArray[AP]);
    textHPValue                   = document.getElementById(textHPValueArray[AP]);

    var popupAttackerRaceValue = popupAttackerRace.value;
    var popupAttackValue = popupAttack.value;
    
    APdmg[AP] = CalcAttack(AllRace_Attacks[popupAttackerRaceValue][popupAttackValue], checkboxinputAttackTile.checked, checkboxinputMedicLink.checked, checkboxinputRunemetal.checked, checkboxinputItemScroll.checked, checkboxinputItemMeat.checked, checkboxinputDebuffPriestess.checked, checkboxinputBuffBloodLust.checked, popupBuffPaladinDmg.value);
    
    if ((AllRace_Attacks[popupAttackerRaceValue][popupAttackValue].name == "Axe Thrower Attack") && ((APTarget[AP-1].currenthp / APTarget[AP-1].maxhp) > 0.5)) // deal with axe thrower, here due to HP condition
    {
        APdmg[AP] = APdmg[AP] + 200;
    }
    
    if (AllRace_Attacks[popupAttackerRaceValue][popupAttackValue].name == "Heavy Ranged Attack") // deal with Heavy Spinup bonus ranged damage
    {
        APdmg[AP] = APdmg[AP] + (APHeavySpinCount[AP-1] * 50);
        APHeavySpinCount[AP] = APHeavySpinCount[AP-1] + 1;
    }
    else if (AllRace_Attacks[popupAttackerRaceValue][popupAttackValue].name == "Heavy Melee Attack") // deal with heavy spinup melee damage
    {
        APdmg[AP] = APdmg[AP] + (APHeavySpinCount[AP-1] * 100);
        APHeavySpinCount[AP] = APHeavySpinCount[AP-1] + 1;
    }
    else
    {
        APHeavySpinCount[AP] = 0;
    }
    
    APComboCount[AP] = APComboCount[AP-1];

    if (checkboxinputItemComboPotion.checked)
    {
        APComboCount[AP] = APComboCount[AP] + 1;
    }

    if ((AllRace_Attacks[popupAttackerRaceValue][popupAttackValue].race == "SL") && (checkboxinputNewCombo.checked))
    {        
        if (APComboCount[AP] > 0)
        {
            APdmg[AP] = APdmg[AP] + (100 * Math.pow(2,APComboCount[AP]));
        }
        
        APComboCount[AP] = APComboCount[AP] + 1;
    }
    else if ((AllRace_Attacks[popupAttackerRaceValue][popupAttackValue].race == "SL") && (checkboxinputItemComboPotion.checked))
    {
        APdmg[AP] = APdmg[AP] + 200;
    }
        
    textAttackValue.innerText = APdmg[AP]; // update the damage value first
    
    if (AllRace_Attacks[popupAttackerRaceValue][popupAttackValue].name == "Taoist Attack") //taoist ignores beer and removes manavial
    {
        APTarget[AP].buffbrew = false;
        APTarget[AP].itemmanavial = false;
        UpdateMaxHP(APTarget[AP]);
        ResistUpdate(AP);
    }


    
    APdmg[AP] = APdmg[AP] - (APdmg[AP] * APres[AP]);
    APdmg[AP] = SLround(APdmg[AP]); //round to nearest 5
    
    if (APTarget[AP].buffbubble)
    {
        APdmg[AP] = 0;
    }
        
    if ((AllRace_Attacks[popupAttackerRaceValue][popupAttackValue].name == "Warrior Attack") && ((APTarget[AP-1].currenthp / APTarget[AP-1].maxhp) <= 0.5) && APdmg[AP] > 0) // deal with warrior, here due to HP condition
    {
        APdmg[AP] = APTarget[AP].currenthp;
    }
    
    textDamageValue.innerText = APdmg[AP];
    
    APTarget[AP].currenthp = APTarget[AP-1].currenthp - APdmg[AP];

    if ((AllRace_Attacks[popupAttackerRaceValue][popupAttackValue].name == "Monk Attack") && (APdmg[AP] > 0) && (AP < 5))
    {
        APTarget[AP].debuffmonk = true;
        UpdateMaxHP(APTarget[AP]);
    }

    if ((APdmg[AP] > 0) && (AllRace_Attacks[popupAttackerRaceValue][popupAttackValue].name == "Drill Direct Attack")) //remove shield
    {
        if (APTarget[AP].itemsoulstone || APTarget[AP].itemshield || APTarget[AP].itemspikearmor)
        {
            APTarget[AP].itemsoulstone = false;
            APTarget[AP].itemshield = false;
            APTarget[AP].itemspikearmor = false;
            UpdateMaxHP(APTarget[AP]);
        }
    }

    if ((textAttackValue.innerText > 0) && (APTarget[AP].buffbubble)) // pop bubble
    {
        APTarget[AP].buffbubble = false;
    }
    
    if ((APdmg[AP] > 0) && (APTarget[AP].buffbrew)) // remove brew buff
    {
        APTarget[AP].buffbrew = false;
    }

    textHPValue.innerText = APTarget[AP].currenthp + " / " + APTarget[AP].maxhp; // update hp counter

//Section to update next Target

    if (AP < 5) //actually, it doesn't really matter if we update AP6...
    {
        APTarget[AP+1] = Object.create(APTarget[AP]);
        
        if ((checkboxinputDebuffAnnihilator.checked) && (AllRace_Attacks[popupAttackerRaceValue][popupAttackValue].dmgtype == Cphy) && (APdmg[AP] > 0)) // remove annihilator debuff
        {
            for (var x = AP+1; x < 6; x++)
            {
                checkboxinputDebuffAnnihilator = document.getElementById(checkboxinputDebuffAnnihilatorArray[x]);
                checkboxinputDebuffAnnihilator.checked = false;
            }
            
        }
                
        if ((APdmg[AP] > 0) && (AllRace_Attacks[popupAttackerRaceValue][popupAttackValue].name == "Poisoner Attack") && (AP < 5))
        {
            checkboxinputDebuffPoisoner = document.getElementById(checkboxinputDebuffPoisonerArray[AP+1]);
            checkboxinputDebuffPoisoner.checked = true;
        }
    
    }



}

function ResistUpdate(AP)
{

    popupAttack                   = document.getElementById(popupAttackArray[AP]);
    checkboxinputResistTile       = document.getElementById(checkboxinputResistTileArray[AP]);
    checkboxinputDebuffJarate     = document.getElementById(checkboxinputDebuffJarateArray[AP]);
    checkboxinputDebuffPoisoner   = document.getElementById(checkboxinputDebuffPoisonerArray[AP]);
    popupBuffPaladinRes           = document.getElementById(popupBuffPaladinResArray[AP]);
    checkboxinputDebuffAnnihilator = document.getElementById(checkboxinputDebuffAnnihilatorArray[AP]);
    textResistValue               = document.getElementById(textResistValueArray[AP]);    
    
    var popupAttackerRaceValue = popupAttackerRace.value;
    var popupAttackValue = popupAttack.value;    
    var attack = AllRace_Attacks[popupAttackerRaceValue][popupAttackValue];
    APres[AP] = CalcResist(APTarget[AP], attack, checkboxinputResistTile.checked, popupBuffPaladinRes.value, checkboxinputDebuffAnnihilator.checked, checkboxinputDebuffJarate.checked, checkboxinputDebuffPoisoner.checked);
    
    if (APres[AP] > 1.00)
    {
        APres[AP] = 1.00;
    }
    
    var resisttext = Math.round(APres[AP] * 100);
    
    resisttext = resisttext + "%";

    textResistValue.innerText = resisttext; 
    
    
}

function AP1UpdateAll(event) //helper function because Dashcode doesn't allow handlers to pass parameters.
{

    APTarget[1] = Object.create(APTarget[0]);
    UpdateMaxHP(APTarget[1]); // because AP 0's HP does not include HPBuff
    
    ResistUpdate(1); //update resist first so that the damage can be calculated in AttackUpdate
    AttackUpdate(1);
    AP2UpdateAll();
}

function AP2UpdateAll(event) //helper function because Dashcode doesn't allow handlers to pass parameters.
{
    ResistUpdate(2); //update resist first so that the damage can be calculated in AttackUpdate
    AttackUpdate(2);
    AP3UpdateAll();
}

function AP3UpdateAll(event) //helper function because Dashcode doesn't allow handlers to pass parameters.
{
    ResistUpdate(3); //update resist first so that the damage can be calculated in AttackUpdate
    AttackUpdate(3);
    AP4UpdateAll();
}

function AP4UpdateAll(event) //helper function because Dashcode doesn't allow handlers to pass parameters.
{
    ResistUpdate(4); //update resist first so that the damage can be calculated in AttackUpdate
    AttackUpdate(4);
    AP5UpdateAll();
}

function AP5UpdateAll(event) //helper function because Dashcode doesn't allow handlers to pass parameters.
{
    ResistUpdate(5); //update resist first so that the damage can be calculated in AttackUpdate
    AttackUpdate(5);
}


function UpdateMaxHP(target)
{
    
    var MaxHP= target.puppet.basehp + HPBuff;
    
    switch (target.puppet.name)
    {
        case "Wraith L1":
        MaxHP = MaxHP + 100;
        break;
        
        case "Wraith L2":
        MaxHP = MaxHP + 200;
        break;
        
        case "Wraith L3":
        MaxHP = MaxHP + 300;
        break;
        
        default:
    }
        
    
    if (target.itemhelm)
    {
        MaxHP = MaxHP + (target.puppet.basehp * 0.1);
    }

    if ((target.itemshield) || (target.itemsoulstone) || (target.itemspikearmor))
    {
        MaxHP = MaxHP + (target.puppet.basehp * 0.1);
    }
    
    if (target.itemmanavial)
    {
        MaxHP = MaxHP + 50;
    }
    
    if (target.debuffmonk)
    {
        MaxHP = MaxHP - (target.puppet.basehp * 0.25);
    }

    MaxHP = SLround(MaxHP);
    
    target.maxhp =  MaxHP;
    
    if (target.currenthp > target.maxhp)
    {
        target.currenthp = target.maxhp;
    }

}

function UpdateTarget1(event) // only used to set APTarget[0] and [1]. The rest should be copied in the AttackUpdate function.
{    
    var popupDefenderRaceValue = popupDefenderRace.value;
    var popupTargetValue = popupTarget.value;
    var SelectedTarget = AllRace_Team[popupDefenderRaceValue][popupTargetValue];
    
    var shield = false;
    var soulstone = false;
    var spikearmor = false;
    
    if (checkboxinputShield.checked)
    {
        switch (popupDefenderRaceValue)
        {
            case "1":
                soulstone = true;
                break;
            case "3":
                spikearmor = true;
                break;
            default:
                shield = true;
                break;
        }
    }

    //always reset 0th target

    APTarget[0] = new OCTarget(SelectedTarget, 0, 0, 0, checkboxinputHelm.checked, shield, soulstone, checkboxinputItemManaVial.checked, checkboxinputBuffBubble.checked, false, checkboxinputBuffBrew.checked, spikearmor, false, checkboxinputDebuffMonk.checked);
    
    var x = HPBuff;
    HPBuff = 0;
    UpdateMaxHP(APTarget[0]); // Oth target maxhp should not include any user changes (i.e. soul bomb)
    HPBuff = x;
    
    textFieldInitialMaxHP.value = APTarget[0].maxhp;
    textFieldInitialCurrentHP.value = APTarget[0].maxhp;
    
    APTarget[0].currenthp = textFieldInitialCurrentHP.value;


    APTarget[1] = new OCTarget(SelectedTarget, 0, 0, 0, checkboxinputHelm.checked, shield, soulstone, checkboxinputItemManaVial.checked, checkboxinputBuffBubble.checked, false, checkboxinputBuffBrew.checked, spikearmor, false, checkboxinputDebuffMonk.checked);
    
    UpdateMaxHP(APTarget[1]);
    
    textFieldInitialMaxHP.value = APTarget[1].maxhp;
    textFieldInitialCurrentHP.value = APTarget[1].maxhp;
    
    APTarget[1].currenthp = textFieldInitialCurrentHP.value;
    
    AP1UpdateAll();
}

function SetMaxHP(event)
{
    APTarget[1].maxhp = textFieldInitialMaxHP.value;
    APTarget[1].currenthp = textFieldInitialMaxHP.value;
    
    HPBuff = APTarget[1].maxhp - APTarget[0].maxhp;

//    APTarget[0].maxhp = textFieldInitialMaxHP.value;
    
    APTarget[0].currenthp = textFieldInitialMaxHP.value;
    textFieldInitialCurrentHP.value = textFieldInitialMaxHP.value;;    
    AP1UpdateAll();
}


function SetCurrentHP(event)
{
    APTarget[1].currenthp = textFieldInitialCurrentHP.value;
    APTarget[0].currenthp = textFieldInitialCurrentHP.value;

    AP1UpdateAll();
}


function CopyToAllAP(event)
{
    popupAttack                    = document.getElementById(popupAttackArray[1]);
    checkboxinputRunemetal         = document.getElementById(checkboxinputRunemetalArray[1]);
    checkboxinputAttackTile        = document.getElementById(checkboxinputAttackTileArray[1]);
    checkboxinputMedicLink         = document.getElementById(checkboxinputMedicLinkArray[1]);
    popupBuffPaladinDmg            = document.getElementById(popupBuffPaladinDmgArray[1]);
    checkboxinputDebuffAnnihilator = document.getElementById(checkboxinputDebuffAnnihilatorArray[1]);
    checkboxinputResistTile        = document.getElementById(checkboxinputResistTileArray[1]);
    popupBuffPaladinRes            = document.getElementById(popupBuffPaladinResArray[1]);


    var popupAttackValue                      = popupAttack.value;
    var checkboxinputRunemetalChecked         = checkboxinputRunemetal.checked;
    var checkboxinputAttackTileChecked        = checkboxinputAttackTile.checked;
    var checkboxinputMedicLinkChecked         = checkboxinputMedicLink.checked;
    var popupBuffPaladinDmgValue              = popupBuffPaladinDmg.value;
    var checkboxinputDebuffAnnihilatorChecked = checkboxinputDebuffAnnihilator.checked;
    var checkboxinputResistTileChecked        = checkboxinputResistTile.checked;
    var popupBuffPaladinResValue              = popupBuffPaladinRes.value;

    for (var x = 2; x < 6; x++)
    {
        popupAttack                    = document.getElementById(popupAttackArray[x]);
        checkboxinputRunemetal         = document.getElementById(checkboxinputRunemetalArray[x]);
        checkboxinputAttackTile        = document.getElementById(checkboxinputAttackTileArray[x]);
        checkboxinputMedicLink         = document.getElementById(checkboxinputMedicLinkArray[x]);
        popupBuffPaladinDmg            = document.getElementById(popupBuffPaladinDmgArray[x]);
        checkboxinputDebuffAnnihilator = document.getElementById(checkboxinputDebuffAnnihilatorArray[x]);
        checkboxinputResistTile        = document.getElementById(checkboxinputResistTileArray[x]);
        popupBuffPaladinRes            = document.getElementById(popupBuffPaladinResArray[x]);
        
        popupAttack.value                      = popupAttackValue;
        checkboxinputRunemetal.checked         = checkboxinputRunemetalChecked;
        checkboxinputAttackTile.checked        = checkboxinputAttackTileChecked;
        checkboxinputMedicLink.checked         = checkboxinputMedicLinkChecked;
        popupBuffPaladinDmg.value              = popupBuffPaladinDmgValue;
        checkboxinputDebuffAnnihilator.checked = checkboxinputDebuffAnnihilatorChecked;
        checkboxinputResistTile.checked        = checkboxinputResistTileChecked;
        popupBuffPaladinRes.value              = popupBuffPaladinResValue;
    }
    
    AP1UpdateAll();

}


function ResetMaxHP(event)
{
    HPBuff = 0; //reset HP buff, used to calculate max HP.
    UpdateTarget1();
}
